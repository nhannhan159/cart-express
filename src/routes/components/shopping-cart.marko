class {
  onCreate() {
    this.state = {
      items: [],
      location: '',
      shippingFee: 0,
      total: 0
    }
  }
  onInput(input) {
    this.state.items = input.items
  }
  handleQuantityChanged(items, el) {
    this.state.items = items;
    this.recalculateCart();
  }
  handleLocationChanged(location, el) {
    this.state.location = location;
    this.recalculateCart();
  }
  recalculateCart() {
    let selectedItems = this.state.items
      .filter(i => i.quantity > 0)
      .map(i => {
        return {
          id: i.id,
          quantity: i.quantity
        }
      });

    //only recalculate if at least 1 item selected 
    if (selectedItems.length > 0) {
      let requestData = {
        des: this.state.location,
        items: selectedItems
      }
      $.ajax({
        type: 'POST',
        url: '/api/cart/calculate',
        processData: false,
        contentType: 'application/json',
        data: JSON.stringify(requestData)
      })
      .done(data => {
        this.state.items.forEach(item => {
          let itemDelivery = data.items.find(i => i.id === item.id);
          if (itemDelivery) {
            item.deliveredFrom = itemDelivery.source;
          }
        });
        this.state.shippingFee = data.shippingFee;
        this.state.total = data.total;
      })
      .fail(err => console.error(`Post error: ${err}`));
    }
  }
}

div#shopping-cart.row
  div.col.hide-on-med-and-down.l2
  div.col.s12.l8.row
    div.col.s12
      cart-title
    div.col.s12.m8
      item-list({items: state.items}) on-change('handleQuantityChanged')
    div.col.s12.m4
      order-summary({shippingFee: state.shippingFee, total: state.total}) on-change('handleLocationChanged')
  div.col.hide-on-med-and-down.l2
